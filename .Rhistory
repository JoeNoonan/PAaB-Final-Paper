plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggsave("output/graphs/extra/m2_non_dem_system_predict_plot.png", plot = m2_non_dem_system_predict_plot, width = 10.685, height = 8, units = "cm", scale = 1, dpi = 300)
#### Create prediction plot
m2_non_dem_system_predict_plot <- ggplot(m2_non_dem_system_predict_df, aes(x = combined_child_rearing ,
y = predf,
group=variable,
color=variable,
fill = variable,
ymin = lower, ymax = upper)) +
facet_wrap(~variable)+
geom_line(size = .5)+
geom_ribbon(alpha =  .5)+
scale_fill_manual(values = color_pallete[1:3])+
scale_color_manual(values = color_pallete[1:3])+
ylab("Predicted probability")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggsave("output/graphs/extra/m2_non_dem_system_predict_plot.png", plot = m2_non_dem_system_predict_plot, width = 10.685, height = 8, units = "cm", scale = 1, dpi = 300)
ggplot(m2_non_dem_system_predict_df, aes(x = combined_child_rearing ,
y = predf,
group=variable,
color=variable,
fill = variable,
ymin = lower, ymax = upper)) +
facet_wrap(~variable)+
geom_line(size = .5)+
geom_ribbon(alpha =  .5)+
scale_fill_manual(values = color_pallete[1:3])+
scale_color_manual(values = color_pallete[1:3])+
ylab("Predicted probability")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
#### Create prediction plot
m2_non_dem_system_predict_plot <- ggplot(m2_non_dem_system_predict_df, aes(x = combined_child_rearing ,
y = predf,
group=variable,
color=variable,
fill = variable,
ymin = lower,
ymax = upper)) +
facet_wrap(~variable)+
geom_line(size = .25)+
geom_ribbon(alpha =  .5)+
scale_fill_manual(values = color_pallete[1:3])+
scale_color_manual(values = color_pallete[1:3])+
ylab("Predicted probability")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggsave("output/graphs/extra/m2_non_dem_system_predict_plot.png", plot = m2_non_dem_system_predict_plot, width = 10.685, height = 8, units = "cm", scale = 1, dpi = 300)
#### Europe M2 Odds facet
#### Not used in final paper
df <- filter(europe_m2, term == "combined_child_rearing") %>%
arrange(desc(estimate)) %>%
mutate(country_name_text  = fct_reorder(country_name_text, estimate)) %>%
mutate(recent_dem = ifelse(country_name_text %in% new_democracies, "New Democracies", "Old Democracies"),
recent_dem = factor(recent_dem, levels = c("Old Democracies", "New Democracies")))
europe_m2_plot_facet <- ggplot(df, aes(x = estimate, y = country_name_text, color = recent_dem)) +
geom_vline(aes(xintercept = 1), size = .75, linetype = "dashed", color = "red") +
geom_errorbarh(aes(xmax = conf.high, xmin = conf.low), size =.5, height = .5, color = "black") +
geom_point(size = 2)+
xlab("Odds Ratio")+
scale_color_manual(values= color_pallete[1:2])+
facet_wrap(~recent_dem, scales = "free_y")+
scale_x_continuous(breaks = seq(-.5, 1.5, .25))+
theme_minimal()+
theme(text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.y = element_blank(),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(size = rel(.9), hjust = .75),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggsave("output/graphs/extra/europe_m2_plot_facet.png", plot = europe_m2_plot_facet, width = 12, height = 8, units = "cm", scale = 1, dpi = 300)
### Export findings
europe_m2_cleaned <- europe_m2 %>%
filter(term != "(Intercept)") %>%
mutate(`Odds Ratio` = estimate,
`95% CI` = paste(round(conf.low,3), "-", round(conf.high,3)),
`p-value` = round(p.value,3)) %>%
select(country_name_text, term, `Odds Ratio`, `95% CI`,`p-value`)
write_csv(europe_m2_cleaned, "output/europe_m2_cleaned.csv")
m2_predict_function <- function(x){
df <- filter(evs_df_final, country_name_text %in% {{x}})
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev, family = binomial, data = df)
### Create new prediction Set
m2_predict_df_new <- with(evs_df_final_new, data.frame(combined_child_rearing = -3:2,
sex=mean(sex, na.rm=TRUE),
age_grp=mean(age_grp, na.rm=TRUE),
educ = mean(educ, na.rm = TRUE),
polint_rev = mean(polint_rev, na.rm = TRUE),
gen_trust_rev = mean(gen_trust_rev, na.rm = TRUE)))
preds_new<- predict(m2, m2_predict_df_new, type="response", se.fit=TRUE)
m2_predict_df_new$predf <- preds_new$fit # predicted
m2_predict_df_new$lower <- preds_new$fit - (1.96*preds_new$se.fit) # lower bounds
m2_predict_df_new$upper <- preds_new$fit + (1.96*preds_new$se.fit) # upper
}
m2_predict_country_list <- lapply(country_list, m1_predict_function)
names(m2_predict_country_list) <- country_list
m2_predict_function <- function(x){
df <- filter(evs_df_final, country_name_text %in% {{x}})
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev, family = binomial, data = df)
### Create new prediction Set
m2_predict_df_new <- with(evs_df_final_new, data.frame(combined_child_rearing = -3:2,
sex=mean(sex, na.rm=TRUE),
age_grp=mean(age_grp, na.rm=TRUE),
educ = mean(educ, na.rm = TRUE),
polint_rev = mean(polint_rev, na.rm = TRUE),
gen_trust_rev = mean(gen_trust_rev, na.rm = TRUE)))
preds_new<- predict(m2, m2_predict_df_new, type="response", se.fit=TRUE)
m2_predict_df_new$predf <- preds_new$fit # predicted
m2_predict_df_new$lower <- preds_new$fit - (1.96*preds_new$se.fit) # lower bounds
m2_predict_df_new$upper <- preds_new$fit + (1.96*preds_new$se.fit) # upper
}
m2_predict_country_list <- lapply(country_list, m2_predict_function)
names(m2_predict_country_list) <- country_list
m2_predict_function <- function(x){
df <- filter(evs_df_final, country_name_text %in% {{x}})
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev, family = binomial, data = df)
### Create new prediction Set
m2_predict_df_new <- with(evs_df_final_new, data.frame(combined_child_rearing = -3:2,
sex=mean(sex, na.rm=TRUE),
age_grp=mean(age_grp, na.rm=TRUE),
educ = mean(educ, na.rm = TRUE),
polint_rev = mean(polint_rev, na.rm = TRUE),
gen_trust_rev = mean(gen_trust_rev, na.rm = TRUE)))
preds_new<- predict(m2, m2_predict_df_new, type="response", se.fit=TRUE)
m2_predict_df_new$predf <- preds_new$fit # predicted
m2_predict_df_new$lower <- preds_new$fit - (1.96*preds_new$se.fit) # lower bounds
m2_predict_df_new$upper <- preds_new$fit + (1.96*preds_new$se.fit) # upper
}
m2_predict_country_list <- lapply(country_list, m2_predict_function)
names(m2_predict_country_list) <- country_list
m2_predict_function <- function(x){
df <- filter(evs_df_final, country_name_text %in% {{x}})
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev, family = binomial, data = df)
### Create new prediction Set
m2_predict_df_new <- with(df, data.frame(combined_child_rearing = -3:2,
sex=mean(sex, na.rm=TRUE),
age_grp=mean(age_grp, na.rm=TRUE),
educ = mean(educ, na.rm = TRUE),
polint_rev = mean(polint_rev, na.rm = TRUE),
gen_trust_rev = mean(gen_trust_rev, na.rm = TRUE)))
preds_new<- predict(m2, m2_predict_df_new, type="response", se.fit=TRUE)
m2_predict_df_new$predf <- preds_new$fit # predicted
m2_predict_df_new$lower <- preds_new$fit - (1.96*preds_new$se.fit) # lower bounds
m2_predict_df_new$upper <- preds_new$fit + (1.96*preds_new$se.fit) # upper
}
m2_predict_country_list <- lapply(country_list, m2_predict_function)
names(m2_predict_country_list) <- country_list
m2_predict_country_list
m2_predict_function <- function(x){
df <- filter(evs_df_final, country_name_text %in% {{x}})
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev, family = binomial, data = df)
### Create new prediction Set
m2_predict_df_new <- with(df, data.frame(combined_child_rearing = -3:2,
sex=mean(sex, na.rm=TRUE),
age_grp=mean(age_grp, na.rm=TRUE),
educ = mean(educ, na.rm = TRUE),
polint_rev = mean(polint_rev, na.rm = TRUE),
gen_trust_rev = mean(gen_trust_rev, na.rm = TRUE)))
preds_new<- predict(m2, m2_predict_df_new, type="response", se.fit=TRUE)
m2_predict_df_new$predf <- preds_new$fit # predicted
m2_predict_df_new$lower <- preds_new$fit - (1.96*preds_new$se.fit) # lower bounds
m2_predict_df_new$upper <- preds_new$fit + (1.96*preds_new$se.fit) # upper
m2_predict_df_new
}
m2_predict_country_list <- lapply(country_list, m2_predict_function)
names(m2_predict_country_list) <- country_list
m2_predict_country_list
m2_predict_function <- function(x){
df <- filter(evs_df_final, country_name_text %in% {{x}})
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev, family = binomial, data = df)
### Create new prediction Set
m2_predict_df <- with(df, data.frame(combined_child_rearing = -3:2,
sex=mean(sex, na.rm=TRUE),
age_grp=mean(age_grp, na.rm=TRUE),
educ = mean(educ, na.rm = TRUE),
polint_rev = mean(polint_rev, na.rm = TRUE),
gen_trust_rev = mean(gen_trust_rev, na.rm = TRUE)))
preds<- predict(m2, m2_predict_df, type="response", se.fit=TRUE)
m2_predict_df$predf <- preds$fit # predicted
m2_predict_df$lower <- preds$fit - (1.96*preds$se.fit) # lower bounds
m2_predict_df$upper <- preds$fit + (1.96*preds$se.fit) # upper
m2_predict_df$country_name_text <- {{x}}
m2_predict_df
}
m2_predict_country_list <- lapply(country_list, m2_predict_function)
names(m2_predict_country_list) <- country_list
m2_predict_europe <- bind_rows(m2_predict_country_list, .id = "country_name_text")
m2_predict_europe
ggplot(m1_predict_europe, aes(x = combined_child_rearing  , y = predf, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha =  .25, fill = color_pallete[1] , colour=NA)+
facet_wrap(~country_name_text)+
ylab("Predicted probability of \n being a committed democrat")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggplot(m1_predict_europe, aes(x = combined_child_rearing  , y = predf, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha =  .25, fill = color_pallete[1] , colour=NA)+
facet_wrap(~country_name_text)+
ylab("Predicted probability of \n being a committed democrat")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggplot(m2_predict_europe, aes(x = combined_child_rearing  , y = predf, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha =  .25, fill = color_pallete[1] , colour=NA)+
facet_wrap(~country_name_text)+
ylab("Predicted probability of \n being a committed democrat")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
#### Not reported in paper
#### M2: Create predict plot with facet_wrap for all countries
m2_predict_eu_plot <- ggplot(m2_predict_europe, aes(x = combined_child_rearing  , y = predf, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha =  .25, fill = color_pallete[1] , colour=NA)+
facet_wrap(~country_name_text)+
ylab("Predicted probability of \n being a committed democrat")+
xlab("Authoritarian Childrearing Values") +
theme_minimal()+
theme( text = element_text(size=12, family = "Meta"),
legend.title= element_blank(),
legend.position="bottom",
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(.25, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.x=element_text(size = rel(.9)),
axis.text.x = element_text(angle = 0, hjust = 0),
axis.text.y = element_text(size = rel(.9)),
plot.title = element_text(size = rel(1), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.75), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .25),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))+
guides(colour = guide_legend(nrow = 1, byrow =  TRUE))
ggsave("output/graphs/extra/m2_predict_europe_plot.png", plot = m2_predict_eu_plot, width = 10.685, height = 8, units = "cm", scale = 2, dpi = 300)
library(tidyverse)
library(here)
library(haven)
library(tidymetadata)
library(surveytoolbox)
### Load in EVS data
### Create unique rowid
evs_df <- read_sav(here("data/ZA7500_v4-0-0.sav"))%>%
rowid_to_column(var = 'rowid')
### Create meta data that shows different codes for different variables
evs_df_meta <- create_metadata(evs_df)
### Merge in country names
evs_country_name_df <- evs_df %>%
extract_vallab("country") %>%
rename(country = id,
country_name_text = country) %>%
mutate(country_name_text = ifelse(country_name_text == "Great Britain", "United Kingdom", country_name_text))
evs_df <- left_join(evs_country_name_df, evs_df)
### DEMOS: gender, age, education
### Could not control for wealth, rural-urban due to high levels of missingness
### Attitudinal: political interest, interpersonal trust
new_democracies <-  c("Slovenia", "Bulgaria", "Croatia",
"Czechia","Poland", "Slovakia",
"Hungary", "Lithuania", "Estonia", "Romania", "Albania")
### Data cleaning scripts here used Wuttke et al.’s (2020) replication material as a guideline:
### https://doi.org/10.7910/DVN/Y5Y6VD,
evs_df_final <- evs_df %>%
### Filter consolidated Democracies
filter(country_name_text %in% c("Albania", "Austria", "Germany", "Iceland",
"Netherlands", "Spain", "Switzerland",
"Slovenia", "Bulgaria", "Croatia",
"Czechia", "Poland", "Slovakia",
"Denmark", "Finland", "France","Italy", "Sweden",
"Hungary", "Lithuania", "Norway",
"Estonia", "Romania", "United Kingdom")) %>%
mutate_at(c("v85", "v95","v86", "v89", "v90"), ~ifelse(. == 2, 0, 1)) %>%
mutate(polImportant = if_else(as.numeric(v5) < 1, NaN, as.numeric(v5)),
polImportant = (polImportant - 4) / (-3), #Standardized
respect_auth = if_else(as.numeric(v114) < 1, NaN, as.numeric(v114)),
respect_auth = (respect_auth - 2) * (-1), #Good thing at 1, bad thing at -1
gen_trust = if_else(as.numeric(v31) < 1, NaN, as.numeric(v31)),
gen_trust_rev = 2 - gen_trust,
polint = if_else(as.numeric(v97) < 1, NaN, as.numeric(v97)),
polint_rev = 5 - polint,
system_democracy = if_else(as.numeric(v148) < 1, NaN, as.numeric(v148)),
system_democracy_binary = if_else(system_democracy %in% c(1, 2), 1,
ifelse(is.na(system_democracy), NA, 0)),
system_leader= if_else(as.numeric(v145) < 1, NaN, as.numeric(v145)),
system_leader_binary = if_else(system_leader %in% c(1, 2), 1,
ifelse(is.na(system_leader), NA, 0)),
system_experts = if_else(as.numeric(v146) < 1, NaN, as.numeric(v146)),
system_experts_binary = if_else(system_experts %in% c(1, 2), 1,
ifelse(is.na(system_experts), NA, 0)),
system_army = if_else(as.numeric(v147) < 1, NaN, as.numeric(v147)),
system_army_binary = if_else(system_army %in% c(1, 2), 1,
ifelse(is.na(system_army), NA, 0)),
non_dem_system = system_leader_binary + system_experts_binary + system_army_binary,
commited_dem = ifelse(system_democracy_binary == 1 & non_dem_system == 0, "Committed Democrat",
ifelse(system_democracy_binary == 1 & non_dem_system > 0, "Noncommited Democrat",
ifelse(system_democracy_binary  == 0, "Non-Democrat", NA))),
commited_dem = factor(commited_dem, levels = c("Non-Democrat", "Noncommited Democrat", "Committed Democrat")),
commit_dem_binary = as.numeric(ifelse(commited_dem == "Committed Democrat", 1, 0)),
auth_child_rearing = v85+v95,
lib_child_rearing = v86+v89+v90,
combined_child_rearing = auth_child_rearing - lib_child_rearing,
combined_child_rearing_standard = (combined_child_rearing + 3) / (1),#Standardized
democracy_freeElection = if_else(as.numeric(v135) < 1, NaN, as.numeric(v135)),
democracy_freeElection = (democracy_freeElection - 1) / (9),#Standardized
democracy_ArmyTakeOver = if_else(as.numeric(v137) < 1, NaN, as.numeric(v137)),
democracy_ArmyTakeOver = (democracy_ArmyTakeOver - 1) / (9),#Standardized
democracy_protectLiberty = if_else(as.numeric(v138) < 1, NaN, as.numeric(v138)),
democracy_protectLiberty = (democracy_protectLiberty - 1) / (9),#Standardized
DemImportant = if_else(as.numeric(v142) < 1, NaN, as.numeric(v142)),
DemImportant = (DemImportant - 1) / (9),#Standardized,
trustParliament = if_else(as.numeric(v121) < 1, NaN, as.numeric(v121)),
trustParliament = (trustParliament - 4) / (-3),#Standardized
trustJustice = if_else(as.numeric(v127) < 1, NaN, as.numeric(v127)),
trustJustice = (trustJustice - 4) / (-3),#Standardized
trustCivilService = if_else(as.numeric(v122) < 1, NaN, as.numeric(v122)),
trustCivilService = (trustCivilService - 4) / (-3),#Standardized,
trustInstSmall = (trustParliament + trustJustice + trustCivilService) / 3, #Additive Index
sex = if_else(as.numeric(v225) < 1, NaN, as.numeric(v225)),
sex = sex - 1,
birthyear = if_else(as.numeric(v226) < 1880, NaN, as.numeric(v226)), #Remove extremely unreasonable respondent ages (older than 110?)
period = 2017,
period = as.numeric(period),
age = 2017 - birthyear,
age_grp = ifelse(age >= 15 & age <20, 1, ifelse(
age >= 20 & age < 30,  2, ifelse(
age >= 30 & age < 40, 3, ifelse(
age >= 40 & age < 50,  4, ifelse(
age >= 50 & age < 60,  5, ifelse(
age >= 60 & age < 70,  6, ifelse(
age >= 70 & age < 80,  7,  8))))))),
educ = ifelse(as.numeric(v243_edulvlb_1) < 0, NaN, as.numeric(v243_edulvlb_1)),
educ = ifelse(educ == 66, 0, educ),
rural_urban = ifelse(as.numeric(v276_r) < 0, NaN, as.numeric(v276_r)),
income = ifelse(as.numeric(v261_r) < 0, NaN, as.numeric(v261_r)),
recent_dem = ifelse(country_name_text %in% new_democracies, 1, 0)) %>%
select(country, country_name_text, gweight, pweight, polImportant, respect_auth, polint, polint_rev, gen_trust, gen_trust_rev,
system_democracy, system_democracy_binary,
system_leader, system_leader_binary,
system_experts, system_experts_binary,
system_army, system_army_binary,
non_dem_system, commited_dem, commit_dem_binary,
auth_child_rearing, lib_child_rearing, combined_child_rearing, combined_child_rearing_standard,
democracy_freeElection, democracy_ArmyTakeOver, democracy_protectLiberty, DemImportant,
trustParliament, trustJustice, trustCivilService, trustInstSmall,
sex, birthyear,age, age_grp, educ, rural_urban,income, recent_dem)
### Logit Regression
### Create split sample
evs_df_final_old <-  filter(evs_df_final, recent_dem == 0)
evs_df_final_new <-  filter(evs_df_final, recent_dem == 1)
### Model 1. Simple bivarient with FE
### Not reported in final paper due to space c
### Model 2. Controls
### Used in the final paper
### gender, age, education, political interest, generalized trust.
### Too much missinginess with income and rural?urban
m2 <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev +country_name_text, data = evs_df_final, family = "binomial")
m2_old <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev + country_name_text, data = evs_df_final_old, family = "binomial")
m2_new <- glm(commit_dem_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev + country_name_text, data = evs_df_final_new, family = "binomial")
### Checks
anova(m2, test = "Chi")
anova(m2_old, test = "Chi")
anova(m2_new, test = "Chi")
### Plot outliers
plot(m2, which = 4, id.n = 3)
# Extract model results
model.data <- broom::augment(m2) %>%
mutate(index = 1:n())
model.data %>% top_n(3, .cooksd)
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = commit_dem_binary ), alpha = .5) +
theme_bw()
### Filter influential cases
model.data %>%
filter(abs(.std.resid) > 3)
### Multicoloniarity
car::vif(m2)
#### Save as tidy dataset
tidy_m2 <- broom::tidy(m2)
tidy_m2_old <- broom::tidy(m2_old)
tidy_m2_new <- broom::tidy(m2_new)
### Exponiate to get odds ratios.
tidy_m2_exp <- broom::tidy(m2, exponentiate = TRUE,  conf.int= TRUE)
tidy_m2_old_exp <- broom::tidy(m2_old, exponentiate = TRUE,  conf.int= TRUE)
tidy_m2_new_exp <- broom::tidy(m2_new, exponentiate = TRUE,  conf.int= TRUE)
tidy_m2_exp
(1-0.889)*100
# running models on the disaggergated system questions
### Reported in final paper
m2_leader <- glm(system_leader_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev +country_name_text, data = evs_df_final, family = "binomial")
m2_experts <- glm(system_experts_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev + country_name_text, data = evs_df_final, family = "binomial")
m2_army<- glm(system_army_binary ~ combined_child_rearing + sex + age_grp + educ + polint_rev + gen_trust_rev + country_name_text, data = evs_df_final, family = "binomial")
#### Save as tidy dataset
tidy_m2_leader<- broom::tidy(m2_leader)
tidy_m2_experts <- broom::tidy(m2_experts)
tidy_m2_army <- broom::tidy(m2_army)
### Exponiate to get odds ratios.
tidy_m2_leader_exp <- broom::tidy(m2_leader, exponentiate = TRUE,  conf.int= TRUE)
tidy_m2_experts_exp <- broom::tidy(m2_experts, exponentiate = TRUE,  conf.int= TRUE)
tidy_m2_army_exp <- broom::tidy(m2_army, exponentiate = TRUE,  conf.int= TRUE)
tidy_m2_leader_exp
tidy_m2_experts_exp
tidy_m2_army_exp
